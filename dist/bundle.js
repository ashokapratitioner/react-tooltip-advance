!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define("react-tooltip-advance",["React","ReactDOM"],t):"object"==typeof exports?exports["react-tooltip-advance"]=t(require("react"),require("react-dom")):e["react-tooltip-advance"]=t(e.React,e.ReactDOM)}(self,((e,t)=>(()=>{"use strict";var r={745:(e,t,r)=>{var o=r(346);t.createRoot=o.createRoot,t.hydrateRoot=o.hydrateRoot},639:t=>{t.exports=e},346:e=>{e.exports=t}},o={};function a(e){var t=o[e];if(void 0!==t)return t.exports;var n=o[e]={exports:{}};return r[e](n,n.exports,a),n.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var r in t)a.o(t,r)&&!a.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{a.r(n);var e=a(639),t=a.n(e);const r=({displayText:r,tooltipText:o})=>{const a=(0,e.useRef)(null);let n;return r?t().createElement("div",{className:"react-tooltip-container"},t().createElement("p",{className:"text-container",ref:e=>{n=e},onMouseOver:e=>{let t=e.clientX,r=e.clientY;a.current.style.top=r+10+"px",a.current.style.left=t+10+"px",a.current.style.opacity=1}},r),t().createElement("span",{className:"tooltip-container",ref:a},o)):t().createElement(t().Fragment,null)};a(745).createRoot(document.getElementById("root")).render(t().createElement(t().StrictMode,null,t().createElement(r,{displayText:"Hello text",tooltipText:"hello tooltip"})))})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,